LIBRARY_OBJECTS = [
  'Simulation',
  'Strategy',
  'RandomStrategy',
  'Metrics',
  'SlotMachine',
  'EpsilonGreedyStrategy',
  'SoftmaxStrategy',
  'UCBStrategy',
  'Kadai',
  'mt'
].map {|x| "src/#{x}.o" }

CPP_FLAGS = "-std=c++17"
CPP = "g++ #{CPP_FLAGS}"

def gpp(x, s)
  sh "#{CPP} -c -o #{x} #{s}"
end

def gppo(x, ps)
  sh "#{CPP} -o #{x} #{ps.join(' ')}"
end

file 'src/mt.o' => ['src/mt.c', 'src/mt.h'] do |t|
  gpp(t.name, t.prerequisites[0])
end

rule ".o" => [".cpp", *FileList['src/*.hpp']] do |t|
  gpp(t.name, t.prerequisites[0])
end


# --- Binaries ---
directory "bin"

BIN_REGEX = /^bin\/(.+)$/
rule(BIN_REGEX => [
       "bin",
       proc {|tn| "src/#{tn.match(BIN_REGEX).captures[0]}.o" },
       *LIBRARY_OBJECTS,
     ]) do |t|
  gppo(t.name, t.prerequisites[1..-1])
end

BIN_KADV1_REGEX = /^bin\/kadv1-([1-3])$/
rule(BIN_KADV1_REGEX => [
       "src/kadv1.cpp",
       proc {|tn| "lib/libslot#{tn.match(BIN_KADV1_REGEX).captures[0]}_18TI018.a"},
       *LIBRARY_OBJECTS,
       "bin"
     ]) do |t|
  pat = t.name.match(BIN_KADV1_REGEX).captures[0]
  sh "#{CPP} -DPATTERN=#{pat} -o #{t.name} #{t.prerequisites[0..-2].join(' ')}"
end

BINARIES =
  [ *[1, 2, 3, 4, 6].map {|x| "bin/k#{x}"},
    "bin/k5-analyze",
    "bin/k5-evaluate",
    *[1, 2, 3].map {|x| "bin/kadv1-#{x}"}
  ]
multitask :binaries => BINARIES
# end --- Binaries ---


# --- Data ---
directory "data"
DATA_K14_REGEX = /^data\/(k[1-4])\.csv$/
rule(DATA_K14_REGEX => [
       proc {|tn| "bin/#{tn.match(DATA_K14_REGEX).captures[0]}"},
       "data"
     ]) do |t|
  sh "#{t.prerequisites[0]} > #{t.name}"
end

DATA_K5_REGEX = /^data\/k5-(analyze|evaluate)-(eg|sm|ucb).csv$/
rule(DATA_K5_REGEX => [
       proc {|tn| "bin/k5-#{tn.match(DATA_K5_REGEX).captures[0]}"},
       "data"
     ]) do |t|
  strat = t.name.match(DATA_K5_REGEX).captures[1]
  sh "#{t.prerequisites[0]} #{strat} > #{t.name}"
end

file "data/k6.csv" => [
       "bin/k6",
       "data"
     ] do |t|
  sh "#{t.prerequisites[0]} > #{t.name}"
end

file "data/kadv1.csv" => [
       *[1, 2, 3].map {|x| "bin/kadv1-#{x}"},
       "data"
     ] do |t|
  for n in 1..3 do
    csv = "data/kadv1-#{n}.csv"
    sh "> #{csv}"
    sh "bash -c \"for run in {1..1000}; do bin/kadv1-#{n} | xargs -n2 -d'\n' | sed -E 's/ CDR: /,/' >> #{csv}; done\""
  end
  csvs = [1, 2, 3].map {|x| "data/kadv1-#{x}.csv"}
  sh "paste -d ',' #{csvs.join(' ')} > #{t.name}"
  sh "rm #{csvs.join(' ')}"
end

DATA_FILES =
  [
    *[1, 2, 3, 4].map {|x| "data/k#{x}.csv"},
    *["eg", "sm", "ucb"].map {|x| "data/k5-analyze-#{x}.csv"},
    *["eg", "sm", "ucb"].map {|x| "data/k5-evaluate-#{x}.csv"},
    "data/k6.csv",
    "data/kadv1.csv"
  ]
multitask :datafiles => DATA_FILES
# end --- Data ---


# --- Plots ---
directory "plots"
directory "plots/k1"
directory "plots/k2"
directory "plots/k3"
directory "plots/k4"
directory "plots/k5-analyze"
directory "plots/k5-evaluate"
directory "plots/k6"
directory "plots/kadv1"

PLOT_K14_REGEX = /^plots\/(k[1-4])\/(engaged_machines|avg_reward|cdr|mu|rho|F|).pdf$/
rule(PLOT_K14_REGEX => [
       proc {|tn| "data/#{tn.match(PLOT_K14_REGEX).captures[0]}.csv"},
       proc {|tn| "gnuplot/plot_#{tn.match(PLOT_K14_REGEX).captures[1]}.gp"},
       proc {|tn| "plots/#{tn.match(PLOT_K14_REGEX).captures[0]}"},
       "gnuplot/common.gp"
     ]) do |t|
  sh "gnuplot -e \"outputfile='#{t.name}'\" -e \"inputfile='#{t.prerequisites[0]}'\" #{t.prerequisites[1]}"
end

PLOT_K5_ANALYZE_REGEX = /^plots\/k5-analyze\/(eg|sm|ucb)_(param_avg_reward|param_cdr).pdf$/
rule(PLOT_K5_ANALYZE_REGEX => [
       proc {|tn| "data/k5-analyze-#{tn.match(PLOT_K5_ANALYZE_REGEX).captures[0]}.csv"},
       proc {|tn| "gnuplot/plot_#{tn.match(PLOT_K5_ANALYZE_REGEX).captures[1]}.gp"},
       "plots/k5-analyze",
       "gnuplot/common.gp"
     ]) do |t|
  strat = t.name.match(PLOT_K5_ANALYZE_REGEX).captures[0]
  param = {
    "eg" => "Epsilon",
    "sm" => "Rho",
    "ucb" => "Alpha"
  }[strat]
  sh "gnuplot -e \"outputfile='#{t.name}'\" -e \"inputfile='#{t.prerequisites[0]}'\" -e \"parameter='#{param}'\" #{t.prerequisites[1]}"
end

PLOT_K5_EVALUATE_REGEX = /^plots\/k5-evaluate\/(eg|sm|ucb)_(avg_reward|cdr).pdf$/
rule(PLOT_K5_EVALUATE_REGEX => [
       proc {|tn| "data/k5-evaluate-#{tn.match(PLOT_K5_EVALUATE_REGEX).captures[0]}.csv"},
       proc {|tn| "gnuplot/plot_#{tn.match(PLOT_K5_EVALUATE_REGEX).captures[1]}.gp"},
       "plots/k5-evaluate",
       "gnuplot/common.gp"
     ]) do |t|
  sh "gnuplot -e \"outputfile='#{t.name}'\" -e \"inputfile='#{t.prerequisites[0]}'\" #{t.prerequisites[1]}"
end

PLOT_K6_REGEX = /^plots\/k6\/(avg_reward|cdr).pdf$/
rule(PLOT_K6_REGEX => [
       "data/k6.csv",
       proc {|tn| "gnuplot/plot_#{tn.match(PLOT_K6_REGEX).captures[0]}_per_pat.gp"},
       "plots/k6",
       "gnuplot/common.gp"
     ]) do |t|
  sh "gnuplot -e \"outputfile='#{t.name}'\" -e \"inputfile='#{t.prerequisites[0]}'\" #{t.prerequisites[1]}"
end

PLOT_KADV1_REGEX = /^plots\/kadv1\/(best_machine|adv_avg_reward|adv_cdr).pdf$/
rule(PLOT_KADV1_REGEX => [
       "data/kadv1.csv",
       proc {|tn| "gnuplot/plot_#{tn.match(PLOT_KADV1_REGEX).captures[0]}.gp"},
       "gnuplot/common.gp",
       "gnuplot/common_adv.gp",
       "plots/kadv1"
     ]) do |t|
  sh "gnuplot -e \"inputfile='#{t.prerequisites[0]}'\" -e \"outputfile='#{t.name}'\" #{t.prerequisites[1]}"
end

PLOT_FILES =
  [
    *[1, 2, 3, 4].map {|x| ["engaged_machines", "avg_reward", "cdr"].map {|y| "plots/k#{x}/#{y}.pdf"}}.reduce(:+),
    "plots/k2/mu.pdf",
    "plots/k3/rho.pdf",
    "plots/k4/F.pdf",
    *["eg", "sm", "ucb"].map {|x| ["param_avg_reward", "param_cdr"].map {|y| "plots/k5-analyze/#{x}_#{y}.pdf"}}.reduce(:+),
    *["eg", "sm", "ucb"].map {|x| ["avg_reward", "cdr"].map {|y| "plots/k5-evaluate/#{x}_#{y}.pdf"}}.reduce(:+),
    *["avg_reward", "cdr"].map {|x| "plots/k6/#{x}.pdf"},
    *["best_machine", "adv_avg_reward", "adv_cdr"].map {|x| "plots/kadv1/#{x}.pdf"}
  ]
multitask :plotfiles => PLOT_FILES

# end --- Plots ---



# --- Report ---
file 'report/rp.dvi' =>
  [
    'report/rp.tex',
    *PLOT_FILES
     ] do |t|
  sh "cd report && texliveonfly -c platex -a \"-halt-on-error\" rp"
end

file 'report/rp.pdf' => 'report/rp.dvi' do |t|
  sh "cd report && dvipdfmx rp"
end

file '18TI018-final.zip' =>
     [
       "rakefile",
       "README.md",
       *FileList['src/*.cpp', 'src/*.hpp', 'gnuplot/*.gp', 'lib/*.a'],
       *DATA_FILES,
       *PLOT_FILES,
       "report/rp.tex",
       "report/rp.pdf"
     ] do |t|
  sh "rm -f #{t.name}"
  sh "zip #{t.name} #{t.prerequisites.join(' ')}"
end

# end --- Report ---
